---
title: Request load balancing
section: indepth
---
<% content_for(:sidebar) { render_partial("../sidebar.html", locals: locals) } %>

# Request load balancing

At its core, Passenger is a process manager and HTTP request router. In order to minimize response times, and to distribute load over multiple CPU cores for optimal performance, Passenger load balances requests over processes in a "least busy process first" manner. This article explains the implications and details of our request load balancing mechanism.

**Table of contents**

<ol class="toc-container"><li>Loading...</li></ol>

## Introduction

<% if language_type == :ruby || language_type == :python %>
  <%= render_partial('intro_ruby_python.md', locals: locals) %>
<% elsif language_type == :nodejs || language_type == :iojs || language_type == :meteor %>
  <%= render_partial('intro_nodejs.md', locals: locals) %>
<% else %>
  <% raise "Unrecognized language #{language_type}" %>
<% end %>

### Maximum process concurrency

A core concept in the load balancing algorithm is that of the **maximum process concurrency**. This is the maximum number of concurrent requests that a particular process can handle.

<%= render_partial('process_concurrency_concept.md', locals: locals) %>

For this reason, load balancing requests between multiple processes is beneficial.

## Least-busy-process-first routing

### Algorithm summary

Passenger keeps a list of application processes. For each application process, Passenger keeps track of how many requests it is currently handling. When a new request comes in, Passenger routes the request to the process that is handling the least number of requests (the one that is "least busy").

<a name="algorithm_ordered"></a>

### First available process in the list has highest priority

If there are multiple processes that have the least busyness, then Passenger will pick the first one in the list. For example, suppose that there are 3 application processes:

    Process A: handling 1 request
    Process B: handling 0 requests
    Process C: handling 0 requests

On the next request, Passenger will always pick B, never C.

This property is used by the [dynamic process scaling](<%= url_for "/indepth/#{language_type}/dynamic_scaling_of_app_processes/index.html" %>) algorithm. Dynamic process scaling works by shutting down processes that haven't received requests for a while (processes that are "idle"). By routing to the first process with least busyiness (instead of, say, a random one, using round-robin), Passenger gives other processes the chance to become idle and thus eligible for shutdown.

Another advantage of picking the first process is that it improves application-level caching. Since the first process is the most likely candidate for load balancing, it will have the most chance to keep its cache warm. Examples of such caches include: in-memory hash tables, JIT caches, etc.

### Traffic may appear unbalanced between processes

Because Passenger [prefers to load balance to the first request](#algorithm_ordered), traffic may appear unbalanced between processes. Here is an example from `passenger-status`:

~~~
/var/www/phusion_blog/current/public:
  App root: /var/www/phusion_blog/current
  Requests in queue: 0
  * PID: 18334   Sessions: 0       Processed: 4595    Uptime: 5h 53m 29s
    CPU: 0%      Memory  : 99M     Last used: 4s ago
  * PID: 18339   Sessions: 0       Processed: 2873    Uptime: 5h 53m 26s
    CPU: 0%      Memory  : 96M     Last used: 29s ago
  * PID: 18343   Sessions: 0       Processed: 33      Uptime: 5m 8s
    CPU: 0%      Memory  : 96M     Last used: 1m 4s ago
  * PID: 18347   Sessions: 0       Processed: 16      Uptime: 2m 16s
    CPU: 0%      Memory  : 96M     Last used: 2m 9s ago
~~~

As you can see, there are 4 processes, but the "Processed" field doesn't look balanced at all. **This is completely normal**, it is supposed to look like this. Passenger does not use round-robin load balancing. The reasons are [explained in the above section](#algorithm_ordered). Despite not _looking_ balanced, Passenger is in fact balancing requests between processes just fine.

<% if language_default_concurrency == 1 %>
### No head-of-line blocking problem

Many web servers and load balancers use independent queues, which causes the problem of head-of-line blocking, whereby HTTP requests to your app are queued behind slow or long-running requests. Passenger avoids this problem by using a single (per application group) shared queue.

Imagine a supermarket with a number of (independent) checkout lanes and a queue in each of them. If someone in one of the queues has trouble with the checkout, everyone already in that queue will be delayed, which is especially unfair if the other queues keep moving fast.

Instead, the Passenger implementation can be compared to using a single (shared) queue and sending only 1 person per checkout lane at a time, thereby preventing head-of-line blocking.
<% end %>

<% if language_min_concurrency == 1 %>
  <%= render_partial('example_max_concurrency_1.md', locals: locals) %>
<% end %>
<% if language_max_concurrency != 1 %>
  <%= render_partial('example_max_concurrency_4.md', locals: locals) %>
<% end %>

## Customized balancing through additional request queues

By default, all requests for an application are balanced in a fair way. You may want to adjust this behavior; for example if your app consists of pages for visitors as well as some kind of web service, you probably want to make sure the visitor requests don't get stuck behind web service requests when under heavy load.

This can be solved by configuring two application groups for your app: one for the web service URL and one for the visitor pages, each with their own request queue. The requests for the visitor pages will keep being handled even if there is an overload of requests for the web service. See the <%= link_to_config_option(:app_group_name, locals) %> option (Apache and Nginx only, not available on Standalone).

The two application groups will still compete with each other for server resources. You can control how many instances are allowed per application group, for example allowing more instances to serve the visitor pages than the web service URL. See the <%= link_to_config_option(:max_instances, locals) %> option.

## Request queue overflow

If a request arrives for an application group, and all its processes are busy, and the application pool is full, the request remains in the Passenger request queue. If this keeps happening (e.g. due to a flood of requests) the queue will eventually overflow its limit (see: <%= link_to_config_option(:max_request_queue_size, locals) %>). Overflowing requests will no longer be balanced, but simply dropped (with a HTTP 503 error).

## See also

 * [Request queueing](<%= url_for "/indepth/request_queueing.html" %>)
 * [Dynamic scaling of application processes](<%= url_for "/indepth/#{language_type}/dynamic_scaling_of_app_processes/index.html" %>)
