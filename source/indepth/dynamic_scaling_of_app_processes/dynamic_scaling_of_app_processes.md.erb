---
title: Dynamic scaling of application processes
section: indepth
---
<%
@page_title = "Dynamic scaling of #{language_name} application processes on Passenger #{integration_mode_name_as_passenger_suffix}"
content_for(:sidebar) { render_partial("../sidebar.html", locals: locals) }
%>

<h1>Dynamic scaling of <%= language_name %> application processes
<small>on Passenger <%= integration_mode_name_as_passenger_suffix %></small></h1>

<p class="lead">Passenger dynamically adjusts the number of application processes based on traffic. Learn how Passenger decides when a process should be added or removed.</p>

**Table of contents**

<ol class="toc-container"><li>Loading...</li></ol>

## Maximum process concurrency

_Main article: [Request load balancing](<%= url_for "/indepth/#{language_type}/request_load_balancing.html" %>)_

A core concept is that of the **maximum process concurrency**. This is the maximum number of concurrent requests that a particular process can handle.

<%= render_partial("../request_load_balancing/process_concurrency_concept.md", locals: locals) %>

<% if language_concurrency_model == :evented %>
  For dynamic process scaling to work, Passenger needs to [know at approximately how many requests the performance of a single process begins to degrade](#assume_application_concurrency). You will learn later how this is done.
<% end %>

## A new process is spawned when the concurrency limit is reached

Passenger keeps track of the number of requests a process is handling. When all processes have reached their maximum concurrency -- that is, they're handling exactly as many requests as their maximum concurrency indicate they can -- then Passenger will decide to spawn a new process.

This behavior is deeply coupled to the [request load balancing logic](<%= url_for "/indepth/#{language_type}/request_load_balancing.html" %>), so you should read up on that too.

<% if language_min_concurrency == 1 %>
  <%= render_partial('example_max_concurrency_1.md', locals: locals) %>
<% end %>
<% if language_max_concurrency != 1 %>
  <% if language_default_concurrency == 0 %>
  But for <%= language_name %> applications, Passenger by default assumes that the concurrency is "unlimited". When that is the case, applications won't ever reach their concurrency limit, so Passenger _won't perform any dynamic process scaling_.
  <% end %>

  <% if language_default_concurrency == 0 && language_concurrency_model == :evented %>
  <a name="assume_application_concurrency"></a>
  To make dynamic process scaling work, you need to tell Passenger what the limit is using <%= link_to_config_option(:assume_application_concurrency, locals) %>. Next follows an example of what happens if we set that option to 4.
  <% end %>

  <%= render_partial('example_max_concurrency_4.md', locals: locals) %>
<% end %>

## A process is shut down when it becomes idle

When a process hasn't processed any requests for [a while](<%= url_for_config_option(:pool_idle_time, locals) %>), it is said to be "idle". Idle processes are shut down in order to conserve resources during periods of low traffic.

## Process limits

The minimum and maximum amount of processes depend on various configuration options, such as <%= link_to_config_option(:max_pool_size, locals) %>,
<% if integration_mode_type != :standalone -%>
  <%= link_to_config_option(:min_instances, locals) %> and <%= link_to_config_option(:max_instances, locals) %>.
<% else -%>
  and <%= link_to_config_option(:min_instances, locals) %>.
<% end -%>
Passenger won't ever scale the number of processes past the limits set by those configuration options.

## Disabling dynamic process scaling

You can disable dynamic process scaling by setting <%= link_to_config_option(:min_instances, locals) %> and <%= link_to_config_option(:max_instances, locals) %> to the same number. The advantage of this is that it will make your server a bit faster, because process spawning is expensive. The disadvantage is that Passenger will not be able to free up processes in order to conserve resources during times of low traffic.

## See also

 * [Request load balancing](<%= url_for "/indepth/#{language_type}/request_load_balancing.html" %>)
 * [Request queueing](<%= url_for "/indepth/request_queueing.html" %>)
