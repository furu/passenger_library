---
title: Dynamic scaling of application processes
section: indepth
---
<%
@page_title = "Dynamic scaling of #{language_name} application processes on Passenger #{integration_mode_name_as_passenger_suffix}"
content_for(:sidebar) { render_partial("../sidebar.html", locals: locals) }
%>

<h1>Dynamic scaling of <%= language_name %> application processes
<small>on Passenger <%= integration_mode_name_as_passenger_suffix %></small></h1>

<p class="lead">Passenger dynamically adjusts the number of application processes based on traffic. Learn how Passenger decides when a process should be added or removed.</p>

**Table of contents**

<ol class="toc-container"><li>Loading...</li></ol>

## Maximum process concurrency

_Main article: [Request load balancing](<%= url_for "/indepth/#{language_type}/request_load_balancing.html" %>)_

A core concept in dynamic process scaling is that of the **maximum process concurrency**. This is the maximum number of concurrent requests that a particular process can handle.

<%= render_partial("../request_load_balancing/process_concurrency_concept.md", locals: locals) %>

<% if language_concurrency_model == :evented %>
  The maximum concurrency setting is very important for Passenger's implementation of automatic process scaling. New processes are not spawned until the current processes have reached their concurrency limit, 
  so a limit must be set for autoscaling to work.
<% end %>

## A new process is spawned when the concurrency limit is reached

Passenger keeps track of the number of requests a process is handling. When all processes have reached their maximum concurrency -- that is, when they're handling exactly as many requests as their maximum concurrency indicate they can -- then Passenger will decide to spawn a new process.

Note that this behavior is intimately coupled with the [request load balancing logic](<%= url_for "/indepth/#{language_type}/request_load_balancing.html" %>).

<% if language_default_concurrency == 0 %>
  <h3>Making dynamic scaling work through the "assume application concurrency" setting</h3>

  Since <%= language_name %> applications are assumed to have unlimited concurrency by default, _dynamic process scaling does not work out-of-the-box_. Passenger will never think that your application process has reached its maximum concurrency. This is why you need to give Passenger a hint: you need to tell Passenger how many concurrent requests your application can handle without degrading performance. This way, Passenger will know when it should spawn more processes.

  This is achieved with the configuration option <%= link_to_config_option(:assume_application_concurrency, locals) %>. For example, to tell Passenger that your application can handle at most 150 concurrent requests without degrading performance, set that option to 150. That way, Passenger will spawn more processes when all existing processes have reached 150 concurrent requests.

  <%= render_partial('example_max_concurrency_4.md', locals: locals) %>
<% elsif language_max_concurrency != 1 %>
  <%= render_partial('example_max_concurrency_1.md', locals: locals) %>
  <%= render_partial('example_max_concurrency_4.md', locals: locals) %>
<% else %>
  <%= render_partial('example_max_concurrency_1.md', locals: locals) %>
<% end %>

## A process is shut down when it becomes idle

When a process hasn't processed any requests for [a while](<%= url_for_config_option(:pool_idle_time, locals) %>), it is said to be "idle". Idle processes are shut down in order to conserve resources during periods of low traffic.

## Process limits

The minimum and maximum amount of processes depend on various configuration options, such as <%= link_to_config_option(:max_pool_size, locals) %>,
<% if integration_mode_type != :standalone -%>
  <%= link_to_config_option(:min_instances, locals) %> and <%= link_to_config_option(:max_instances, locals) %>.
<% else -%>
  and <%= link_to_config_option(:min_instances, locals) %>.
<% end -%>
Passenger won't ever scale the number of processes past the limits set by those configuration options.

## Disabling dynamic process scaling

You can disable dynamic process scaling by setting <%= link_to_config_option(:min_instances, locals) %> and <%= link_to_config_option(:max_instances, locals) %> to the same number. The advantage of this is that it will make your server a bit faster, because process spawning is expensive. The disadvantage is that Passenger will not be able to free up processes in order to conserve resources during times of low traffic.

## See also

 * [Request load balancing](<%= url_for "/indepth/#{language_type}/request_load_balancing.html" %>)
 * [Request queueing](<%= url_for "/indepth/request_queueing.html" %>)
